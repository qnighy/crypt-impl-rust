// Copyright (c) 2016 Masaki Hara
//
// This software is released under the MIT License.
// http://opensource.org/licenses/mit-license.php

extern crate byteorder;

use self::byteorder::ByteOrder;

type AESEndian = byteorder::NativeEndian;
// type AESEndian = byteorder::BigEndian;
// type AESEndian = byteorder::LittleEndian;

pub struct AES {
    num_rounds: u32,
    subkeys: [u32; 60],
    subkeys_inv: [u32; 60],
}

impl AES {
    pub fn new(key: &[u8]) -> AES {
        let mut ret = AES {
            num_rounds: 0,
            subkeys: [0; 60],
            subkeys_inv: [0; 60],
        };
        ret.schedule(key);
        ret.schedule_inv();
        return ret;
    }
    pub fn encrypt(&self, block: &mut [u8]) {
        assert_eq!(block.len(), 16);
        let mut block32 : [u32; 4] = [0; 4];
        for i in 0..4 {
            block32[i] = AESEndian::read_u32(&block[i*4..i*4+4]);
        }
        self.add_round_key(&mut block32, 0);
        for r in 1..self.num_rounds {
            AESEndian::round(&mut block32);
            self.add_round_key(&mut block32, r as usize);
        }
        AESEndian::round_final(&mut block32);
        self.add_round_key(&mut block32, self.num_rounds as usize);
        for i in 0..4 {
            AESEndian::write_u32(&mut block[i*4..i*4+4], block32[i]);
        }
    }
    pub fn decrypt(&self, block: &mut [u8]) {
        assert_eq!(block.len(), 16);
        let mut block32 : [u32; 4] = [0; 4];
        for i in 0..4 {
            block32[i] = AESEndian::read_u32(&block[i*4..i*4+4]);
        }
        self.add_round_key_inv(&mut block32, 0);
        for r in 1..self.num_rounds {
            AESEndian::round_inv(&mut block32);
            self.add_round_key_inv(&mut block32, r as usize);
        }
        AESEndian::round_inv_final(&mut block32);
        self.add_round_key_inv(&mut block32, self.num_rounds as usize);
        for i in 0..4 {
            AESEndian::write_u32(&mut block[i*4..i*4+4], block32[i]);
        }
    }
    fn schedule(&mut self, key: &[u8]) {
        assert!(
            key.len() == 16 || key.len() == 24 || key.len() == 32,
            "Invalid AES key length of {}", key.len());
        self.num_rounds = 6 + (key.len() as u32) / 4;
        for j in 0..(key.len()/4) {
            self.subkeys[j] = AESEndian::read_u32(&key[j * 4 .. j * 4 + 4]);
        }
        let subkey_len = 28 + key.len();
        let mut t : [u8; 4] = [0; 4];
        t.copy_from_slice(&key[key.len() - 4 ..]);
        for i in 0.. {
            for j in 0..(key.len()/4) {
                if key.len()/4 * (i + 1) + j >= subkey_len {
                    return;
                } else if j == 0 {
                    let t0 = S[t[1] as usize] ^ RCON[i+1];
                    t[1] = S[t[2] as usize];
                    t[2] = S[t[3] as usize];
                    t[3] = S[t[0] as usize];
                    t[0] = t0;
                } else if key.len() == 32 && j == 4 {
                    for k in 0..4 { t[k] = S[t[k] as usize]; }
                }
                let t32 = AESEndian::read_u32(&t);
                let t32 = t32 ^ self.subkeys[key.len()/4 * i + j];
                self.subkeys[key.len()/4 * (i + 1) + j] = t32;
                AESEndian::write_u32(&mut t, t32);
            }
        }
    }
    fn schedule_inv(&mut self) {
        let nr = self.num_rounds as usize;
        for i in 0 .. nr+1 {
            for j in 0 .. 4 {
                if i == 0 || i == nr {
                    self.subkeys_inv[(nr-i)*4+j] =
                        self.subkeys[i*4+j];
                } else {
                    self.subkeys_inv[(nr-i)*4+j] =
                        AESEndian::invert_key(self.subkeys[i*4+j]);
                }
            }
        }
    }
    fn add_round_key(&self, block: &mut [u32; 4], idx: usize) {
        for i in 0..4 {
            block[i] ^= self.subkeys[4 * idx + i];
        }
    }
    fn add_round_key_inv(&self, block: &mut [u32; 4], idx: usize) {
        for i in 0..4 {
            block[i] ^= self.subkeys_inv[4 * idx + i];
        }
    }
}

trait ByteOrderAES {
    fn invert_key(key: u32) -> u32;
    fn round(block: &mut [u32; 4]);
    fn round_inv(block: &mut [u32; 4]);
    fn round_final(block: &mut [u32; 4]);
    fn round_inv_final(block: &mut [u32; 4]);
}

impl ByteOrderAES for byteorder::BigEndian {
    fn invert_key(key: u32) -> u32 {
        let mut key8 : [u8; 4] = [0; 4];
        Self::write_u32(&mut key8, key);
        let mut x : u32 = 0;
        for j in 0..4 {
            x ^= SMIX_INV_BE[S[key8[j] as usize] as usize]
                .rotate_right((j*8) as u32);
        }
        return x;
    }
    fn round(block: &mut [u32; 4]) {
        let mut b8 : [u8; 16] = [0; 16];
        for i in 0..4 {
            Self::write_u32(&mut b8[i*4 .. i*4+4], block[i]);
        }
        for i in 0..4 {
            let mut x : u32 = SMIX_BE[b8[i*4] as usize];
            for j in 1..4 {
                x ^= SMIX_BE[b8[((i+j)&3)*4+j] as usize]
                    .rotate_right((j*8) as u32);
            }
            block[i] = x;
        }
    }
    fn round_inv(block: &mut [u32; 4]) {
        let mut b8 : [u8; 16] = [0; 16];
        for i in 0..4 {
            Self::write_u32(&mut b8[i*4 .. i*4+4], block[i]);
        }
        for i in 0..4 {
            let mut x : u32 = SMIX_INV_BE[b8[i*4] as usize];
            for j in 1..4 {
                x ^= SMIX_INV_BE[b8[((i+4-j)&3)*4+j] as usize]
                    .rotate_right((j*8) as u32);
            }
            block[i] = x;
        }
    }
    fn round_final(block: &mut [u32; 4]) {
        let mut b8 : [u8; 16] = [0; 16];
        for i in 0..4 {
            Self::write_u32(&mut b8[i*4 .. i*4+4], block[i]);
        }
        for i in 0..4 {
            let mut x8 : [u8; 4] = [0; 4];
            for j in 0..4 {
                x8[j] = S[b8[((i+j)&3)*4+j] as usize];
            }
            block[i] = Self::read_u32(&x8);
        }
    }
    fn round_inv_final(block: &mut [u32; 4]) {
        let mut b8 : [u8; 16] = [0; 16];
        for i in 0..4 {
            Self::write_u32(&mut b8[i*4 .. i*4+4], block[i]);
        }
        for i in 0..4 {
            let mut x8 : [u8; 4] = [0; 4];
            for j in 0..4 {
                x8[j] = SINV[b8[((i+4-j)&3)*4+j] as usize];
            }
            block[i] = Self::read_u32(&x8);
        }
    }
}

impl ByteOrderAES for byteorder::LittleEndian {
    fn invert_key(key: u32) -> u32 {
        let mut key8 : [u8; 4] = [0; 4];
        Self::write_u32(&mut key8, key);
        let mut x : u32 = 0;
        for j in 0..4 {
            x ^= SMIX_INV_LE[S[key8[j] as usize] as usize]
                .rotate_left((j*8) as u32);
        }
        return x;
    }
    fn round(block: &mut [u32; 4]) {
        let mut b8 : [u8; 16] = [0; 16];
        for i in 0..4 {
            Self::write_u32(&mut b8[i*4 .. i*4+4], block[i]);
        }
        for i in 0..4 {
            let mut x : u32 = SMIX_LE[b8[i*4] as usize];
            for j in 1..4 {
                x ^= SMIX_LE[b8[((i+j)&3)*4+j] as usize]
                    .rotate_left((j*8) as u32);
            }
            block[i] = x;
        }
    }
    fn round_inv(block: &mut [u32; 4]) {
        let mut b8 : [u8; 16] = [0; 16];
        for i in 0..4 {
            Self::write_u32(&mut b8[i*4 .. i*4+4], block[i]);
        }
        for i in 0..4 {
            let mut x : u32 = SMIX_INV_LE[b8[i*4] as usize];
            for j in 1..4 {
                x ^= SMIX_INV_LE[b8[((i+4-j)&3)*4+j] as usize]
                    .rotate_left((j*8) as u32);
            }
            block[i] = x;
        }
    }
    fn round_final(block: &mut [u32; 4]) {
        let mut b8 : [u8; 16] = [0; 16];
        for i in 0..4 {
            Self::write_u32(&mut b8[i*4 .. i*4+4], block[i]);
        }
        for i in 0..4 {
            let mut x8 : [u8; 4] = [0; 4];
            for j in 0..4 {
                x8[j] = S[b8[((i+j)&3)*4+j] as usize];
            }
            block[i] = Self::read_u32(&x8);
        }
    }
    fn round_inv_final(block: &mut [u32; 4]) {
        let mut b8 : [u8; 16] = [0; 16];
        for i in 0..4 {
            Self::write_u32(&mut b8[i*4 .. i*4+4], block[i]);
        }
        for i in 0..4 {
            let mut x8 : [u8; 4] = [0; 4];
            for j in 0..4 {
                x8[j] = SINV[b8[((i+4-j)&3)*4+j] as usize];
            }
            block[i] = Self::read_u32(&x8);
        }
    }
}

const S : [u8; 256] = [
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5,
    0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0,
    0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC,
    0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A,
    0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0,
    0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B,
    0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85,
    0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5,
    0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17,
    0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88,
    0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C,
    0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9,
    0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6,
    0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E,
    0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94,
    0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68,
    0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
];

const SINV : [u8; 256] = [
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38,
    0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87,
    0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D,
    0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2,
    0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16,
    0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA,
    0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A,
    0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02,
    0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA,
    0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85,
    0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89,
    0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20,
    0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31,
    0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D,
    0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0,
    0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26,
    0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
];

const RCON : [u8; 256] = [
    0x8D, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40,
    0x80, 0x1B, 0x36, 0x6C, 0xD8, 0xAB, 0x4D, 0x9A,
    0x2F, 0x5E, 0xBC, 0x63, 0xC6, 0x97, 0x35, 0x6A,
    0xD4, 0xB3, 0x7D, 0xFA, 0xEF, 0xC5, 0x91, 0x39,
    0x72, 0xE4, 0xD3, 0xBD, 0x61, 0xC2, 0x9F, 0x25,
    0x4A, 0x94, 0x33, 0x66, 0xCC, 0x83, 0x1D, 0x3A,
    0x74, 0xE8, 0xCB, 0x8D, 0x01, 0x02, 0x04, 0x08,
    0x10, 0x20, 0x40, 0x80, 0x1B, 0x36, 0x6C, 0xD8,
    0xAB, 0x4D, 0x9A, 0x2F, 0x5E, 0xBC, 0x63, 0xC6,
    0x97, 0x35, 0x6A, 0xD4, 0xB3, 0x7D, 0xFA, 0xEF,
    0xC5, 0x91, 0x39, 0x72, 0xE4, 0xD3, 0xBD, 0x61,
    0xC2, 0x9F, 0x25, 0x4A, 0x94, 0x33, 0x66, 0xCC,
    0x83, 0x1D, 0x3A, 0x74, 0xE8, 0xCB, 0x8D, 0x01,
    0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B,
    0x36, 0x6C, 0xD8, 0xAB, 0x4D, 0x9A, 0x2F, 0x5E,
    0xBC, 0x63, 0xC6, 0x97, 0x35, 0x6A, 0xD4, 0xB3,
    0x7D, 0xFA, 0xEF, 0xC5, 0x91, 0x39, 0x72, 0xE4,
    0xD3, 0xBD, 0x61, 0xC2, 0x9F, 0x25, 0x4A, 0x94,
    0x33, 0x66, 0xCC, 0x83, 0x1D, 0x3A, 0x74, 0xE8,
    0xCB, 0x8D, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
    0x40, 0x80, 0x1B, 0x36, 0x6C, 0xD8, 0xAB, 0x4D,
    0x9A, 0x2F, 0x5E, 0xBC, 0x63, 0xC6, 0x97, 0x35,
    0x6A, 0xD4, 0xB3, 0x7D, 0xFA, 0xEF, 0xC5, 0x91,
    0x39, 0x72, 0xE4, 0xD3, 0xBD, 0x61, 0xC2, 0x9F,
    0x25, 0x4A, 0x94, 0x33, 0x66, 0xCC, 0x83, 0x1D,
    0x3A, 0x74, 0xE8, 0xCB, 0x8D, 0x01, 0x02, 0x04,
    0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36, 0x6C,
    0xD8, 0xAB, 0x4D, 0x9A, 0x2F, 0x5E, 0xBC, 0x63,
    0xC6, 0x97, 0x35, 0x6A, 0xD4, 0xB3, 0x7D, 0xFA,
    0xEF, 0xC5, 0x91, 0x39, 0x72, 0xE4, 0xD3, 0xBD,
    0x61, 0xC2, 0x9F, 0x25, 0x4A, 0x94, 0x33, 0x66,
    0xCC, 0x83, 0x1D, 0x3A, 0x74, 0xE8, 0xCB, 0x8D,
];

const SMIX_BE : [u32; 256] = [
    0xC66363A5, 0xF87C7C84, 0xEE777799, 0xF67B7B8D,
    0xFFF2F20D, 0xD66B6BBD, 0xDE6F6FB1, 0x91C5C554,
    0x60303050, 0x02010103, 0xCE6767A9, 0x562B2B7D,
    0xE7FEFE19, 0xB5D7D762, 0x4DABABE6, 0xEC76769A,
    0x8FCACA45, 0x1F82829D, 0x89C9C940, 0xFA7D7D87,
    0xEFFAFA15, 0xB25959EB, 0x8E4747C9, 0xFBF0F00B,
    0x41ADADEC, 0xB3D4D467, 0x5FA2A2FD, 0x45AFAFEA,
    0x239C9CBF, 0x53A4A4F7, 0xE4727296, 0x9BC0C05B,
    0x75B7B7C2, 0xE1FDFD1C, 0x3D9393AE, 0x4C26266A,
    0x6C36365A, 0x7E3F3F41, 0xF5F7F702, 0x83CCCC4F,
    0x6834345C, 0x51A5A5F4, 0xD1E5E534, 0xF9F1F108,
    0xE2717193, 0xABD8D873, 0x62313153, 0x2A15153F,
    0x0804040C, 0x95C7C752, 0x46232365, 0x9DC3C35E,
    0x30181828, 0x379696A1, 0x0A05050F, 0x2F9A9AB5,
    0x0E070709, 0x24121236, 0x1B80809B, 0xDFE2E23D,
    0xCDEBEB26, 0x4E272769, 0x7FB2B2CD, 0xEA75759F,
    0x1209091B, 0x1D83839E, 0x582C2C74, 0x341A1A2E,
    0x361B1B2D, 0xDC6E6EB2, 0xB45A5AEE, 0x5BA0A0FB,
    0xA45252F6, 0x763B3B4D, 0xB7D6D661, 0x7DB3B3CE,
    0x5229297B, 0xDDE3E33E, 0x5E2F2F71, 0x13848497,
    0xA65353F5, 0xB9D1D168, 0x00000000, 0xC1EDED2C,
    0x40202060, 0xE3FCFC1F, 0x79B1B1C8, 0xB65B5BED,
    0xD46A6ABE, 0x8DCBCB46, 0x67BEBED9, 0x7239394B,
    0x944A4ADE, 0x984C4CD4, 0xB05858E8, 0x85CFCF4A,
    0xBBD0D06B, 0xC5EFEF2A, 0x4FAAAAE5, 0xEDFBFB16,
    0x864343C5, 0x9A4D4DD7, 0x66333355, 0x11858594,
    0x8A4545CF, 0xE9F9F910, 0x04020206, 0xFE7F7F81,
    0xA05050F0, 0x783C3C44, 0x259F9FBA, 0x4BA8A8E3,
    0xA25151F3, 0x5DA3A3FE, 0x804040C0, 0x058F8F8A,
    0x3F9292AD, 0x219D9DBC, 0x70383848, 0xF1F5F504,
    0x63BCBCDF, 0x77B6B6C1, 0xAFDADA75, 0x42212163,
    0x20101030, 0xE5FFFF1A, 0xFDF3F30E, 0xBFD2D26D,
    0x81CDCD4C, 0x180C0C14, 0x26131335, 0xC3ECEC2F,
    0xBE5F5FE1, 0x359797A2, 0x884444CC, 0x2E171739,
    0x93C4C457, 0x55A7A7F2, 0xFC7E7E82, 0x7A3D3D47,
    0xC86464AC, 0xBA5D5DE7, 0x3219192B, 0xE6737395,
    0xC06060A0, 0x19818198, 0x9E4F4FD1, 0xA3DCDC7F,
    0x44222266, 0x542A2A7E, 0x3B9090AB, 0x0B888883,
    0x8C4646CA, 0xC7EEEE29, 0x6BB8B8D3, 0x2814143C,
    0xA7DEDE79, 0xBC5E5EE2, 0x160B0B1D, 0xADDBDB76,
    0xDBE0E03B, 0x64323256, 0x743A3A4E, 0x140A0A1E,
    0x924949DB, 0x0C06060A, 0x4824246C, 0xB85C5CE4,
    0x9FC2C25D, 0xBDD3D36E, 0x43ACACEF, 0xC46262A6,
    0x399191A8, 0x319595A4, 0xD3E4E437, 0xF279798B,
    0xD5E7E732, 0x8BC8C843, 0x6E373759, 0xDA6D6DB7,
    0x018D8D8C, 0xB1D5D564, 0x9C4E4ED2, 0x49A9A9E0,
    0xD86C6CB4, 0xAC5656FA, 0xF3F4F407, 0xCFEAEA25,
    0xCA6565AF, 0xF47A7A8E, 0x47AEAEE9, 0x10080818,
    0x6FBABAD5, 0xF0787888, 0x4A25256F, 0x5C2E2E72,
    0x381C1C24, 0x57A6A6F1, 0x73B4B4C7, 0x97C6C651,
    0xCBE8E823, 0xA1DDDD7C, 0xE874749C, 0x3E1F1F21,
    0x964B4BDD, 0x61BDBDDC, 0x0D8B8B86, 0x0F8A8A85,
    0xE0707090, 0x7C3E3E42, 0x71B5B5C4, 0xCC6666AA,
    0x904848D8, 0x06030305, 0xF7F6F601, 0x1C0E0E12,
    0xC26161A3, 0x6A35355F, 0xAE5757F9, 0x69B9B9D0,
    0x17868691, 0x99C1C158, 0x3A1D1D27, 0x279E9EB9,
    0xD9E1E138, 0xEBF8F813, 0x2B9898B3, 0x22111133,
    0xD26969BB, 0xA9D9D970, 0x078E8E89, 0x339494A7,
    0x2D9B9BB6, 0x3C1E1E22, 0x15878792, 0xC9E9E920,
    0x87CECE49, 0xAA5555FF, 0x50282878, 0xA5DFDF7A,
    0x038C8C8F, 0x59A1A1F8, 0x09898980, 0x1A0D0D17,
    0x65BFBFDA, 0xD7E6E631, 0x844242C6, 0xD06868B8,
    0x824141C3, 0x299999B0, 0x5A2D2D77, 0x1E0F0F11,
    0x7BB0B0CB, 0xA85454FC, 0x6DBBBBD6, 0x2C16163A,
];

const SMIX_INV_BE : [u32; 256] = [
    0x51F4A750, 0x7E416553, 0x1A17A4C3, 0x3A275E96,
    0x3BAB6BCB, 0x1F9D45F1, 0xACFA58AB, 0x4BE30393,
    0x2030FA55, 0xAD766DF6, 0x88CC7691, 0xF5024C25,
    0x4FE5D7FC, 0xC52ACBD7, 0x26354480, 0xB562A38F,
    0xDEB15A49, 0x25BA1B67, 0x45EA0E98, 0x5DFEC0E1,
    0xC32F7502, 0x814CF012, 0x8D4697A3, 0x6BD3F9C6,
    0x038F5FE7, 0x15929C95, 0xBF6D7AEB, 0x955259DA,
    0xD4BE832D, 0x587421D3, 0x49E06929, 0x8EC9C844,
    0x75C2896A, 0xF48E7978, 0x99583E6B, 0x27B971DD,
    0xBEE14FB6, 0xF088AD17, 0xC920AC66, 0x7DCE3AB4,
    0x63DF4A18, 0xE51A3182, 0x97513360, 0x62537F45,
    0xB16477E0, 0xBB6BAE84, 0xFE81A01C, 0xF9082B94,
    0x70486858, 0x8F45FD19, 0x94DE6C87, 0x527BF8B7,
    0xAB73D323, 0x724B02E2, 0xE31F8F57, 0x6655AB2A,
    0xB2EB2807, 0x2FB5C203, 0x86C57B9A, 0xD33708A5,
    0x302887F2, 0x23BFA5B2, 0x02036ABA, 0xED16825C,
    0x8ACF1C2B, 0xA779B492, 0xF307F2F0, 0x4E69E2A1,
    0x65DAF4CD, 0x0605BED5, 0xD134621F, 0xC4A6FE8A,
    0x342E539D, 0xA2F355A0, 0x058AE132, 0xA4F6EB75,
    0x0B83EC39, 0x4060EFAA, 0x5E719F06, 0xBD6E1051,
    0x3E218AF9, 0x96DD063D, 0xDD3E05AE, 0x4DE6BD46,
    0x91548DB5, 0x71C45D05, 0x0406D46F, 0x605015FF,
    0x1998FB24, 0xD6BDE997, 0x894043CC, 0x67D99E77,
    0xB0E842BD, 0x07898B88, 0xE7195B38, 0x79C8EEDB,
    0xA17C0A47, 0x7C420FE9, 0xF8841EC9, 0x00000000,
    0x09808683, 0x322BED48, 0x1E1170AC, 0x6C5A724E,
    0xFD0EFFFB, 0x0F853856, 0x3DAED51E, 0x362D3927,
    0x0A0FD964, 0x685CA621, 0x9B5B54D1, 0x24362E3A,
    0x0C0A67B1, 0x9357E70F, 0xB4EE96D2, 0x1B9B919E,
    0x80C0C54F, 0x61DC20A2, 0x5A774B69, 0x1C121A16,
    0xE293BA0A, 0xC0A02AE5, 0x3C22E043, 0x121B171D,
    0x0E090D0B, 0xF28BC7AD, 0x2DB6A8B9, 0x141EA9C8,
    0x57F11985, 0xAF75074C, 0xEE99DDBB, 0xA37F60FD,
    0xF701269F, 0x5C72F5BC, 0x44663BC5, 0x5BFB7E34,
    0x8B432976, 0xCB23C6DC, 0xB6EDFC68, 0xB8E4F163,
    0xD731DCCA, 0x42638510, 0x13972240, 0x84C61120,
    0x854A247D, 0xD2BB3DF8, 0xAEF93211, 0xC729A16D,
    0x1D9E2F4B, 0xDCB230F3, 0x0D8652EC, 0x77C1E3D0,
    0x2BB3166C, 0xA970B999, 0x119448FA, 0x47E96422,
    0xA8FC8CC4, 0xA0F03F1A, 0x567D2CD8, 0x223390EF,
    0x87494EC7, 0xD938D1C1, 0x8CCAA2FE, 0x98D40B36,
    0xA6F581CF, 0xA57ADE28, 0xDAB78E26, 0x3FADBFA4,
    0x2C3A9DE4, 0x5078920D, 0x6A5FCC9B, 0x547E4662,
    0xF68D13C2, 0x90D8B8E8, 0x2E39F75E, 0x82C3AFF5,
    0x9F5D80BE, 0x69D0937C, 0x6FD52DA9, 0xCF2512B3,
    0xC8AC993B, 0x10187DA7, 0xE89C636E, 0xDB3BBB7B,
    0xCD267809, 0x6E5918F4, 0xEC9AB701, 0x834F9AA8,
    0xE6956E65, 0xAAFFE67E, 0x21BCCF08, 0xEF15E8E6,
    0xBAE79BD9, 0x4A6F36CE, 0xEA9F09D4, 0x29B07CD6,
    0x31A4B2AF, 0x2A3F2331, 0xC6A59430, 0x35A266C0,
    0x744EBC37, 0xFC82CAA6, 0xE090D0B0, 0x33A7D815,
    0xF104984A, 0x41ECDAF7, 0x7FCD500E, 0x1791F62F,
    0x764DD68D, 0x43EFB04D, 0xCCAA4D54, 0xE49604DF,
    0x9ED1B5E3, 0x4C6A881B, 0xC12C1FB8, 0x4665517F,
    0x9D5EEA04, 0x018C355D, 0xFA877473, 0xFB0B412E,
    0xB3671D5A, 0x92DBD252, 0xE9105633, 0x6DD64713,
    0x9AD7618C, 0x37A10C7A, 0x59F8148E, 0xEB133C89,
    0xCEA927EE, 0xB761C935, 0xE11CE5ED, 0x7A47B13C,
    0x9CD2DF59, 0x55F2733F, 0x1814CE79, 0x73C737BF,
    0x53F7CDEA, 0x5FFDAA5B, 0xDF3D6F14, 0x7844DB86,
    0xCAAFF381, 0xB968C43E, 0x3824342C, 0xC2A3405F,
    0x161DC372, 0xBCE2250C, 0x283C498B, 0xFF0D9541,
    0x39A80171, 0x080CB3DE, 0xD8B4E49C, 0x6456C190,
    0x7BCB8461, 0xD532B670, 0x486C5C74, 0xD0B85742,
];

const SMIX_LE : [u32; 256] = [
    0xA56363C6, 0x847C7CF8, 0x997777EE, 0x8D7B7BF6,
    0x0DF2F2FF, 0xBD6B6BD6, 0xB16F6FDE, 0x54C5C591,
    0x50303060, 0x03010102, 0xA96767CE, 0x7D2B2B56,
    0x19FEFEE7, 0x62D7D7B5, 0xE6ABAB4D, 0x9A7676EC,
    0x45CACA8F, 0x9D82821F, 0x40C9C989, 0x877D7DFA,
    0x15FAFAEF, 0xEB5959B2, 0xC947478E, 0x0BF0F0FB,
    0xECADAD41, 0x67D4D4B3, 0xFDA2A25F, 0xEAAFAF45,
    0xBF9C9C23, 0xF7A4A453, 0x967272E4, 0x5BC0C09B,
    0xC2B7B775, 0x1CFDFDE1, 0xAE93933D, 0x6A26264C,
    0x5A36366C, 0x413F3F7E, 0x02F7F7F5, 0x4FCCCC83,
    0x5C343468, 0xF4A5A551, 0x34E5E5D1, 0x08F1F1F9,
    0x937171E2, 0x73D8D8AB, 0x53313162, 0x3F15152A,
    0x0C040408, 0x52C7C795, 0x65232346, 0x5EC3C39D,
    0x28181830, 0xA1969637, 0x0F05050A, 0xB59A9A2F,
    0x0907070E, 0x36121224, 0x9B80801B, 0x3DE2E2DF,
    0x26EBEBCD, 0x6927274E, 0xCDB2B27F, 0x9F7575EA,
    0x1B090912, 0x9E83831D, 0x742C2C58, 0x2E1A1A34,
    0x2D1B1B36, 0xB26E6EDC, 0xEE5A5AB4, 0xFBA0A05B,
    0xF65252A4, 0x4D3B3B76, 0x61D6D6B7, 0xCEB3B37D,
    0x7B292952, 0x3EE3E3DD, 0x712F2F5E, 0x97848413,
    0xF55353A6, 0x68D1D1B9, 0x00000000, 0x2CEDEDC1,
    0x60202040, 0x1FFCFCE3, 0xC8B1B179, 0xED5B5BB6,
    0xBE6A6AD4, 0x46CBCB8D, 0xD9BEBE67, 0x4B393972,
    0xDE4A4A94, 0xD44C4C98, 0xE85858B0, 0x4ACFCF85,
    0x6BD0D0BB, 0x2AEFEFC5, 0xE5AAAA4F, 0x16FBFBED,
    0xC5434386, 0xD74D4D9A, 0x55333366, 0x94858511,
    0xCF45458A, 0x10F9F9E9, 0x06020204, 0x817F7FFE,
    0xF05050A0, 0x443C3C78, 0xBA9F9F25, 0xE3A8A84B,
    0xF35151A2, 0xFEA3A35D, 0xC0404080, 0x8A8F8F05,
    0xAD92923F, 0xBC9D9D21, 0x48383870, 0x04F5F5F1,
    0xDFBCBC63, 0xC1B6B677, 0x75DADAAF, 0x63212142,
    0x30101020, 0x1AFFFFE5, 0x0EF3F3FD, 0x6DD2D2BF,
    0x4CCDCD81, 0x140C0C18, 0x35131326, 0x2FECECC3,
    0xE15F5FBE, 0xA2979735, 0xCC444488, 0x3917172E,
    0x57C4C493, 0xF2A7A755, 0x827E7EFC, 0x473D3D7A,
    0xAC6464C8, 0xE75D5DBA, 0x2B191932, 0x957373E6,
    0xA06060C0, 0x98818119, 0xD14F4F9E, 0x7FDCDCA3,
    0x66222244, 0x7E2A2A54, 0xAB90903B, 0x8388880B,
    0xCA46468C, 0x29EEEEC7, 0xD3B8B86B, 0x3C141428,
    0x79DEDEA7, 0xE25E5EBC, 0x1D0B0B16, 0x76DBDBAD,
    0x3BE0E0DB, 0x56323264, 0x4E3A3A74, 0x1E0A0A14,
    0xDB494992, 0x0A06060C, 0x6C242448, 0xE45C5CB8,
    0x5DC2C29F, 0x6ED3D3BD, 0xEFACAC43, 0xA66262C4,
    0xA8919139, 0xA4959531, 0x37E4E4D3, 0x8B7979F2,
    0x32E7E7D5, 0x43C8C88B, 0x5937376E, 0xB76D6DDA,
    0x8C8D8D01, 0x64D5D5B1, 0xD24E4E9C, 0xE0A9A949,
    0xB46C6CD8, 0xFA5656AC, 0x07F4F4F3, 0x25EAEACF,
    0xAF6565CA, 0x8E7A7AF4, 0xE9AEAE47, 0x18080810,
    0xD5BABA6F, 0x887878F0, 0x6F25254A, 0x722E2E5C,
    0x241C1C38, 0xF1A6A657, 0xC7B4B473, 0x51C6C697,
    0x23E8E8CB, 0x7CDDDDA1, 0x9C7474E8, 0x211F1F3E,
    0xDD4B4B96, 0xDCBDBD61, 0x868B8B0D, 0x858A8A0F,
    0x907070E0, 0x423E3E7C, 0xC4B5B571, 0xAA6666CC,
    0xD8484890, 0x05030306, 0x01F6F6F7, 0x120E0E1C,
    0xA36161C2, 0x5F35356A, 0xF95757AE, 0xD0B9B969,
    0x91868617, 0x58C1C199, 0x271D1D3A, 0xB99E9E27,
    0x38E1E1D9, 0x13F8F8EB, 0xB398982B, 0x33111122,
    0xBB6969D2, 0x70D9D9A9, 0x898E8E07, 0xA7949433,
    0xB69B9B2D, 0x221E1E3C, 0x92878715, 0x20E9E9C9,
    0x49CECE87, 0xFF5555AA, 0x78282850, 0x7ADFDFA5,
    0x8F8C8C03, 0xF8A1A159, 0x80898909, 0x170D0D1A,
    0xDABFBF65, 0x31E6E6D7, 0xC6424284, 0xB86868D0,
    0xC3414182, 0xB0999929, 0x772D2D5A, 0x110F0F1E,
    0xCBB0B07B, 0xFC5454A8, 0xD6BBBB6D, 0x3A16162C,
];

const SMIX_INV_LE : [u32; 256] = [
    0x50A7F451, 0x5365417E, 0xC3A4171A, 0x965E273A,
    0xCB6BAB3B, 0xF1459D1F, 0xAB58FAAC, 0x9303E34B,
    0x55FA3020, 0xF66D76AD, 0x9176CC88, 0x254C02F5,
    0xFCD7E54F, 0xD7CB2AC5, 0x80443526, 0x8FA362B5,
    0x495AB1DE, 0x671BBA25, 0x980EEA45, 0xE1C0FE5D,
    0x02752FC3, 0x12F04C81, 0xA397468D, 0xC6F9D36B,
    0xE75F8F03, 0x959C9215, 0xEB7A6DBF, 0xDA595295,
    0x2D83BED4, 0xD3217458, 0x2969E049, 0x44C8C98E,
    0x6A89C275, 0x78798EF4, 0x6B3E5899, 0xDD71B927,
    0xB64FE1BE, 0x17AD88F0, 0x66AC20C9, 0xB43ACE7D,
    0x184ADF63, 0x82311AE5, 0x60335197, 0x457F5362,
    0xE07764B1, 0x84AE6BBB, 0x1CA081FE, 0x942B08F9,
    0x58684870, 0x19FD458F, 0x876CDE94, 0xB7F87B52,
    0x23D373AB, 0xE2024B72, 0x578F1FE3, 0x2AAB5566,
    0x0728EBB2, 0x03C2B52F, 0x9A7BC586, 0xA50837D3,
    0xF2872830, 0xB2A5BF23, 0xBA6A0302, 0x5C8216ED,
    0x2B1CCF8A, 0x92B479A7, 0xF0F207F3, 0xA1E2694E,
    0xCDF4DA65, 0xD5BE0506, 0x1F6234D1, 0x8AFEA6C4,
    0x9D532E34, 0xA055F3A2, 0x32E18A05, 0x75EBF6A4,
    0x39EC830B, 0xAAEF6040, 0x069F715E, 0x51106EBD,
    0xF98A213E, 0x3D06DD96, 0xAE053EDD, 0x46BDE64D,
    0xB58D5491, 0x055DC471, 0x6FD40604, 0xFF155060,
    0x24FB9819, 0x97E9BDD6, 0xCC434089, 0x779ED967,
    0xBD42E8B0, 0x888B8907, 0x385B19E7, 0xDBEEC879,
    0x470A7CA1, 0xE90F427C, 0xC91E84F8, 0x00000000,
    0x83868009, 0x48ED2B32, 0xAC70111E, 0x4E725A6C,
    0xFBFF0EFD, 0x5638850F, 0x1ED5AE3D, 0x27392D36,
    0x64D90F0A, 0x21A65C68, 0xD1545B9B, 0x3A2E3624,
    0xB1670A0C, 0x0FE75793, 0xD296EEB4, 0x9E919B1B,
    0x4FC5C080, 0xA220DC61, 0x694B775A, 0x161A121C,
    0x0ABA93E2, 0xE52AA0C0, 0x43E0223C, 0x1D171B12,
    0x0B0D090E, 0xADC78BF2, 0xB9A8B62D, 0xC8A91E14,
    0x8519F157, 0x4C0775AF, 0xBBDD99EE, 0xFD607FA3,
    0x9F2601F7, 0xBCF5725C, 0xC53B6644, 0x347EFB5B,
    0x7629438B, 0xDCC623CB, 0x68FCEDB6, 0x63F1E4B8,
    0xCADC31D7, 0x10856342, 0x40229713, 0x2011C684,
    0x7D244A85, 0xF83DBBD2, 0x1132F9AE, 0x6DA129C7,
    0x4B2F9E1D, 0xF330B2DC, 0xEC52860D, 0xD0E3C177,
    0x6C16B32B, 0x99B970A9, 0xFA489411, 0x2264E947,
    0xC48CFCA8, 0x1A3FF0A0, 0xD82C7D56, 0xEF903322,
    0xC74E4987, 0xC1D138D9, 0xFEA2CA8C, 0x360BD498,
    0xCF81F5A6, 0x28DE7AA5, 0x268EB7DA, 0xA4BFAD3F,
    0xE49D3A2C, 0x0D927850, 0x9BCC5F6A, 0x62467E54,
    0xC2138DF6, 0xE8B8D890, 0x5EF7392E, 0xF5AFC382,
    0xBE805D9F, 0x7C93D069, 0xA92DD56F, 0xB31225CF,
    0x3B99ACC8, 0xA77D1810, 0x6E639CE8, 0x7BBB3BDB,
    0x097826CD, 0xF418596E, 0x01B79AEC, 0xA89A4F83,
    0x656E95E6, 0x7EE6FFAA, 0x08CFBC21, 0xE6E815EF,
    0xD99BE7BA, 0xCE366F4A, 0xD4099FEA, 0xD67CB029,
    0xAFB2A431, 0x31233F2A, 0x3094A5C6, 0xC066A235,
    0x37BC4E74, 0xA6CA82FC, 0xB0D090E0, 0x15D8A733,
    0x4A9804F1, 0xF7DAEC41, 0x0E50CD7F, 0x2FF69117,
    0x8DD64D76, 0x4DB0EF43, 0x544DAACC, 0xDF0496E4,
    0xE3B5D19E, 0x1B886A4C, 0xB81F2CC1, 0x7F516546,
    0x04EA5E9D, 0x5D358C01, 0x737487FA, 0x2E410BFB,
    0x5A1D67B3, 0x52D2DB92, 0x335610E9, 0x1347D66D,
    0x8C61D79A, 0x7A0CA137, 0x8E14F859, 0x893C13EB,
    0xEE27A9CE, 0x35C961B7, 0xEDE51CE1, 0x3CB1477A,
    0x59DFD29C, 0x3F73F255, 0x79CE1418, 0xBF37C773,
    0xEACDF753, 0x5BAAFD5F, 0x146F3DDF, 0x86DB4478,
    0x81F3AFCA, 0x3EC468B9, 0x2C342438, 0x5F40A3C2,
    0x72C31D16, 0x0C25E2BC, 0x8B493C28, 0x41950DFF,
    0x7101A839, 0xDEB30C08, 0x9CE4B4D8, 0x90C15664,
    0x6184CB7B, 0x70B632D5, 0x745C6C48, 0x4257B8D0,
];

#[cfg(test)]
mod tests;
