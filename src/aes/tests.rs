use aes::byteorder::{self, ByteOrder};
use aes::{AES, AESEndian, ByteOrderAES};

#[test]
fn test_scheduling_128() {
    let aes = AES::new(
        &[0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6,
        0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF, 0x4F, 0x3C]);
    let mut subkeys : [u8; 176] = [0; 176];
    for i in 0..176/4 {
        AESEndian::write_u32(&mut subkeys[4 * i .. 4 * i + 4], aes.subkeys[i]);
    }
    assert_eq!(subkeys[  0..  4], [0x2B, 0x7E, 0x15, 0x16]);
    assert_eq!(subkeys[  4..  8], [0x28, 0xAE, 0xD2, 0xA6]);
    assert_eq!(subkeys[  8.. 12], [0xAB, 0xF7, 0x15, 0x88]);
    assert_eq!(subkeys[ 12.. 16], [0x09, 0xCF, 0x4F, 0x3C]);
    assert_eq!(subkeys[ 16.. 20], [0xA0, 0xFA, 0xFE, 0x17]);
    assert_eq!(subkeys[ 20.. 24], [0x88, 0x54, 0x2C, 0xB1]);
    assert_eq!(subkeys[ 24.. 28], [0x23, 0xA3, 0x39, 0x39]);
    assert_eq!(subkeys[ 28.. 32], [0x2A, 0x6C, 0x76, 0x05]);
    assert_eq!(subkeys[ 32.. 36], [0xF2, 0xC2, 0x95, 0xF2]);
    assert_eq!(subkeys[ 36.. 40], [0x7A, 0x96, 0xB9, 0x43]);
    assert_eq!(subkeys[ 40.. 44], [0x59, 0x35, 0x80, 0x7A]);
    assert_eq!(subkeys[ 44.. 48], [0x73, 0x59, 0xF6, 0x7F]);
    assert_eq!(subkeys[ 48.. 52], [0x3D, 0x80, 0x47, 0x7D]);
    assert_eq!(subkeys[ 52.. 56], [0x47, 0x16, 0xFE, 0x3E]);
    assert_eq!(subkeys[ 56.. 60], [0x1E, 0x23, 0x7E, 0x44]);
    assert_eq!(subkeys[ 60.. 64], [0x6D, 0x7A, 0x88, 0x3B]);
    assert_eq!(subkeys[ 64.. 68], [0xEF, 0x44, 0xA5, 0x41]);
    assert_eq!(subkeys[ 68.. 72], [0xA8, 0x52, 0x5B, 0x7F]);
    assert_eq!(subkeys[ 72.. 76], [0xB6, 0x71, 0x25, 0x3B]);
    assert_eq!(subkeys[ 76.. 80], [0xDB, 0x0B, 0xAD, 0x00]);
    assert_eq!(subkeys[ 80.. 84], [0xD4, 0xD1, 0xC6, 0xF8]);
    assert_eq!(subkeys[ 84.. 88], [0x7C, 0x83, 0x9D, 0x87]);
    assert_eq!(subkeys[ 88.. 92], [0xCA, 0xF2, 0xB8, 0xBC]);
    assert_eq!(subkeys[ 92.. 96], [0x11, 0xF9, 0x15, 0xBC]);
    assert_eq!(subkeys[ 96..100], [0x6D, 0x88, 0xA3, 0x7A]);
    assert_eq!(subkeys[100..104], [0x11, 0x0B, 0x3E, 0xFD]);
    assert_eq!(subkeys[104..108], [0xDB, 0xF9, 0x86, 0x41]);
    assert_eq!(subkeys[108..112], [0xCA, 0x00, 0x93, 0xFD]);
    assert_eq!(subkeys[112..116], [0x4E, 0x54, 0xF7, 0x0E]);
    assert_eq!(subkeys[116..120], [0x5F, 0x5F, 0xC9, 0xF3]);
    assert_eq!(subkeys[120..124], [0x84, 0xA6, 0x4F, 0xB2]);
    assert_eq!(subkeys[124..128], [0x4E, 0xA6, 0xDC, 0x4F]);
    assert_eq!(subkeys[128..132], [0xEA, 0xD2, 0x73, 0x21]);
    assert_eq!(subkeys[132..136], [0xB5, 0x8D, 0xBA, 0xD2]);
    assert_eq!(subkeys[136..140], [0x31, 0x2B, 0xF5, 0x60]);
    assert_eq!(subkeys[140..144], [0x7F, 0x8D, 0x29, 0x2F]);
    assert_eq!(subkeys[144..148], [0xAC, 0x77, 0x66, 0xF3]);
    assert_eq!(subkeys[148..152], [0x19, 0xFA, 0xDC, 0x21]);
    assert_eq!(subkeys[152..156], [0x28, 0xD1, 0x29, 0x41]);
    assert_eq!(subkeys[156..160], [0x57, 0x5C, 0x00, 0x6E]);
    assert_eq!(subkeys[160..164], [0xD0, 0x14, 0xF9, 0xA8]);
    assert_eq!(subkeys[164..168], [0xC9, 0xEE, 0x25, 0x89]);
    assert_eq!(subkeys[168..172], [0xE1, 0x3F, 0x0C, 0xC8]);
    assert_eq!(subkeys[172..176], [0xB6, 0x63, 0x0C, 0xA6]);

    let mut subkeys_inv : [u8; 176] = [0; 176];
    for i in 0..176/4 {
        AESEndian::write_u32(
            &mut subkeys_inv[4 * i .. 4 * i + 4], aes.subkeys_inv[i]);
    }
    assert_eq!(subkeys_inv[  0..  4], [0xD0, 0x14, 0xF9, 0xA8]);
    assert_eq!(subkeys_inv[  4..  8], [0xC9, 0xEE, 0x25, 0x89]);
    assert_eq!(subkeys_inv[  8.. 12], [0xE1, 0x3F, 0x0C, 0xC8]);
    assert_eq!(subkeys_inv[ 12.. 16], [0xB6, 0x63, 0x0C, 0xA6]);
    assert_eq!(subkeys_inv[ 16.. 20], [0x0C, 0x7B, 0x5A, 0x63]);
    assert_eq!(subkeys_inv[ 20.. 24], [0x13, 0x19, 0xEA, 0xFE]);
    assert_eq!(subkeys_inv[ 24.. 28], [0xB0, 0x39, 0x88, 0x90]);
    assert_eq!(subkeys_inv[ 28.. 32], [0x66, 0x4C, 0xFB, 0xB4]);
    assert_eq!(subkeys_inv[ 32.. 36], [0xDF, 0x7D, 0x92, 0x5A]);
    assert_eq!(subkeys_inv[ 36.. 40], [0x1F, 0x62, 0xB0, 0x9D]);
    assert_eq!(subkeys_inv[ 40.. 44], [0xA3, 0x20, 0x62, 0x6E]);
    assert_eq!(subkeys_inv[ 44.. 48], [0xD6, 0x75, 0x73, 0x24]);
    assert_eq!(subkeys_inv[ 48.. 52], [0x12, 0xC0, 0x76, 0x47]);
    assert_eq!(subkeys_inv[ 52.. 56], [0xC0, 0x1F, 0x22, 0xC7]);
    assert_eq!(subkeys_inv[ 56.. 60], [0xBC, 0x42, 0xD2, 0xF3]);
    assert_eq!(subkeys_inv[ 60.. 64], [0x75, 0x55, 0x11, 0x4A]);
    assert_eq!(subkeys_inv[ 64.. 68], [0x6E, 0xFC, 0xD8, 0x76]);
    assert_eq!(subkeys_inv[ 68.. 72], [0xD2, 0xDF, 0x54, 0x80]);
    assert_eq!(subkeys_inv[ 72.. 76], [0x7C, 0x5D, 0xF0, 0x34]);
    assert_eq!(subkeys_inv[ 76.. 80], [0xC9, 0x17, 0xC3, 0xB9]);
    assert_eq!(subkeys_inv[ 80.. 84], [0x6E, 0xA3, 0x0A, 0xFC]);
    assert_eq!(subkeys_inv[ 84.. 88], [0xBC, 0x23, 0x8C, 0xF6]);
    assert_eq!(subkeys_inv[ 88.. 92], [0xAE, 0x82, 0xA4, 0xB4]);
    assert_eq!(subkeys_inv[ 92.. 96], [0xB5, 0x4A, 0x33, 0x8D]);
    assert_eq!(subkeys_inv[ 96..100], [0x90, 0x88, 0x44, 0x13]);
    assert_eq!(subkeys_inv[100..104], [0xD2, 0x80, 0x86, 0x0A]);
    assert_eq!(subkeys_inv[104..108], [0x12, 0xA1, 0x28, 0x42]);
    assert_eq!(subkeys_inv[108..112], [0x1B, 0xC8, 0x97, 0x39]);
    assert_eq!(subkeys_inv[112..116], [0x7C, 0x1F, 0x13, 0xF7]);
    assert_eq!(subkeys_inv[116..120], [0x42, 0x08, 0xC2, 0x19]);
    assert_eq!(subkeys_inv[120..124], [0xC0, 0x21, 0xAE, 0x48]);
    assert_eq!(subkeys_inv[124..128], [0x09, 0x69, 0xBF, 0x7B]);
    assert_eq!(subkeys_inv[128..132], [0xCC, 0x75, 0x05, 0xEB]);
    assert_eq!(subkeys_inv[132..136], [0x3E, 0x17, 0xD1, 0xEE]);
    assert_eq!(subkeys_inv[136..140], [0x82, 0x29, 0x6C, 0x51]);
    assert_eq!(subkeys_inv[140..144], [0xC9, 0x48, 0x11, 0x33]);
    assert_eq!(subkeys_inv[144..148], [0x2B, 0x37, 0x08, 0xA7]);
    assert_eq!(subkeys_inv[148..152], [0xF2, 0x62, 0xD4, 0x05]);
    assert_eq!(subkeys_inv[152..156], [0xBC, 0x3E, 0xBD, 0xBF]);
    assert_eq!(subkeys_inv[156..160], [0x4B, 0x61, 0x7D, 0x62]);
    assert_eq!(subkeys_inv[160..164], [0x2B, 0x7E, 0x15, 0x16]);
    assert_eq!(subkeys_inv[164..168], [0x28, 0xAE, 0xD2, 0xA6]);
    assert_eq!(subkeys_inv[168..172], [0xAB, 0xF7, 0x15, 0x88]);
    assert_eq!(subkeys_inv[172..176], [0x09, 0xCF, 0x4F, 0x3C]);
}

#[test]
fn test_scheduling_192() {
    let aes = AES::new(
        &[0x8E, 0x73, 0xB0, 0xF7, 0xDA, 0x0E, 0x64, 0x52,
        0xC8, 0x10, 0xF3, 0x2B, 0x80, 0x90, 0x79, 0xE5,
        0x62, 0xF8, 0xEA, 0xD2, 0x52, 0x2C, 0x6B, 0x7B]);
    let mut subkeys : [u8; 208] = [0; 208];
    for i in 0..208/4 {
        AESEndian::write_u32(&mut subkeys[4 * i .. 4 * i + 4], aes.subkeys[i]);
    }
    assert_eq!(subkeys[  0..  4], [0x8E, 0x73, 0xB0, 0xF7]);
    assert_eq!(subkeys[  4..  8], [0xDA, 0x0E, 0x64, 0x52]);
    assert_eq!(subkeys[  8.. 12], [0xC8, 0x10, 0xF3, 0x2B]);
    assert_eq!(subkeys[ 12.. 16], [0x80, 0x90, 0x79, 0xE5]);
    assert_eq!(subkeys[ 16.. 20], [0x62, 0xF8, 0xEA, 0xD2]);
    assert_eq!(subkeys[ 20.. 24], [0x52, 0x2C, 0x6B, 0x7B]);
    assert_eq!(subkeys[ 24.. 28], [0xFE, 0x0C, 0x91, 0xF7]);
    assert_eq!(subkeys[ 28.. 32], [0x24, 0x02, 0xF5, 0xA5]);
    assert_eq!(subkeys[ 32.. 36], [0xEC, 0x12, 0x06, 0x8E]);
    assert_eq!(subkeys[ 36.. 40], [0x6C, 0x82, 0x7F, 0x6B]);
    assert_eq!(subkeys[ 40.. 44], [0x0E, 0x7A, 0x95, 0xB9]);
    assert_eq!(subkeys[ 44.. 48], [0x5C, 0x56, 0xFE, 0xC2]);
    assert_eq!(subkeys[ 48.. 52], [0x4D, 0xB7, 0xB4, 0xBD]);
    assert_eq!(subkeys[ 52.. 56], [0x69, 0xB5, 0x41, 0x18]);
    assert_eq!(subkeys[ 56.. 60], [0x85, 0xA7, 0x47, 0x96]);
    assert_eq!(subkeys[ 60.. 64], [0xE9, 0x25, 0x38, 0xFD]);
    assert_eq!(subkeys[ 64.. 68], [0xE7, 0x5F, 0xAD, 0x44]);
    assert_eq!(subkeys[ 68.. 72], [0xBB, 0x09, 0x53, 0x86]);
    assert_eq!(subkeys[ 72.. 76], [0x48, 0x5A, 0xF0, 0x57]);
    assert_eq!(subkeys[ 76.. 80], [0x21, 0xEF, 0xB1, 0x4F]);
    assert_eq!(subkeys[ 80.. 84], [0xA4, 0x48, 0xF6, 0xD9]);
    assert_eq!(subkeys[ 84.. 88], [0x4D, 0x6D, 0xCE, 0x24]);
    assert_eq!(subkeys[ 88.. 92], [0xAA, 0x32, 0x63, 0x60]);
    assert_eq!(subkeys[ 92.. 96], [0x11, 0x3B, 0x30, 0xE6]);
    assert_eq!(subkeys[ 96..100], [0xA2, 0x5E, 0x7E, 0xD5]);
    assert_eq!(subkeys[100..104], [0x83, 0xB1, 0xCF, 0x9A]);
    assert_eq!(subkeys[104..108], [0x27, 0xF9, 0x39, 0x43]);
    assert_eq!(subkeys[108..112], [0x6A, 0x94, 0xF7, 0x67]);
    assert_eq!(subkeys[112..116], [0xC0, 0xA6, 0x94, 0x07]);
    assert_eq!(subkeys[116..120], [0xD1, 0x9D, 0xA4, 0xE1]);
    assert_eq!(subkeys[120..124], [0xEC, 0x17, 0x86, 0xEB]);
    assert_eq!(subkeys[124..128], [0x6F, 0xA6, 0x49, 0x71]);
    assert_eq!(subkeys[128..132], [0x48, 0x5F, 0x70, 0x32]);
    assert_eq!(subkeys[132..136], [0x22, 0xCB, 0x87, 0x55]);
    assert_eq!(subkeys[136..140], [0xE2, 0x6D, 0x13, 0x52]);
    assert_eq!(subkeys[140..144], [0x33, 0xF0, 0xB7, 0xB3]);
    assert_eq!(subkeys[144..148], [0x40, 0xBE, 0xEB, 0x28]);
    assert_eq!(subkeys[148..152], [0x2F, 0x18, 0xA2, 0x59]);
    assert_eq!(subkeys[152..156], [0x67, 0x47, 0xD2, 0x6B]);
    assert_eq!(subkeys[156..160], [0x45, 0x8C, 0x55, 0x3E]);
    assert_eq!(subkeys[160..164], [0xA7, 0xE1, 0x46, 0x6C]);
    assert_eq!(subkeys[164..168], [0x94, 0x11, 0xF1, 0xDF]);
    assert_eq!(subkeys[168..172], [0x82, 0x1F, 0x75, 0x0A]);
    assert_eq!(subkeys[172..176], [0xAD, 0x07, 0xD7, 0x53]);
    assert_eq!(subkeys[176..180], [0xCA, 0x40, 0x05, 0x38]);
    assert_eq!(subkeys[180..184], [0x8F, 0xCC, 0x50, 0x06]);
    assert_eq!(subkeys[184..188], [0x28, 0x2D, 0x16, 0x6A]);
    assert_eq!(subkeys[188..192], [0xBC, 0x3C, 0xE7, 0xB5]);
    assert_eq!(subkeys[192..196], [0xE9, 0x8B, 0xA0, 0x6F]);
    assert_eq!(subkeys[196..200], [0x44, 0x8C, 0x77, 0x3C]);
    assert_eq!(subkeys[200..204], [0x8E, 0xCC, 0x72, 0x04]);
    assert_eq!(subkeys[204..208], [0x01, 0x00, 0x22, 0x02]);

    let mut subkeys_inv : [u8; 208] = [0; 208];
    for i in 0..208/4 {
        AESEndian::write_u32(
            &mut subkeys_inv[4 * i .. 4 * i + 4], aes.subkeys_inv[i]);
    }
    assert_eq!(subkeys_inv[  0..  4], [0xE9, 0x8B, 0xA0, 0x6F]);
    assert_eq!(subkeys_inv[  4..  8], [0x44, 0x8C, 0x77, 0x3C]);
    assert_eq!(subkeys_inv[  8.. 12], [0x8E, 0xCC, 0x72, 0x04]);
    assert_eq!(subkeys_inv[ 12.. 16], [0x01, 0x00, 0x22, 0x02]);
    assert_eq!(subkeys_inv[ 16.. 20], [0xAC, 0x49, 0x16, 0x44]);
    assert_eq!(subkeys_inv[ 20.. 24], [0xE5, 0x57, 0x10, 0xB7]);
    assert_eq!(subkeys_inv[ 24.. 28], [0x46, 0xC0, 0x8A, 0x75]);
    assert_eq!(subkeys_inv[ 28.. 32], [0xC8, 0x9B, 0x2C, 0xAD]);
    assert_eq!(subkeys_inv[ 32.. 36], [0xA3, 0x97, 0x9A, 0xC2]);
    assert_eq!(subkeys_inv[ 36.. 40], [0x8E, 0x5B, 0xA6, 0xD8]);
    assert_eq!(subkeys_inv[ 40.. 44], [0xE1, 0x2C, 0xC9, 0xE6]);
    assert_eq!(subkeys_inv[ 44.. 48], [0x54, 0xB2, 0x72, 0xBA]);
    assert_eq!(subkeys_inv[ 48.. 52], [0xF3, 0xB4, 0x22, 0x58]);
    assert_eq!(subkeys_inv[ 52.. 56], [0xB5, 0x9E, 0xBB, 0x5C]);
    assert_eq!(subkeys_inv[ 56.. 60], [0xF8, 0xFB, 0x64, 0xFE]);
    assert_eq!(subkeys_inv[ 60.. 64], [0x49, 0x1E, 0x06, 0xF3]);
    assert_eq!(subkeys_inv[ 64.. 68], [0x4D, 0x65, 0xDF, 0xA2]);
    assert_eq!(subkeys_inv[ 68.. 72], [0xB1, 0xE5, 0x62, 0x0D]);
    assert_eq!(subkeys_inv[ 72.. 76], [0xEA, 0x89, 0x9C, 0x31]);
    assert_eq!(subkeys_inv[ 76.. 80], [0x2D, 0xCC, 0x3C, 0x1A]);
    assert_eq!(subkeys_inv[ 80.. 84], [0x5B, 0x6C, 0xFE, 0x3C]);
    assert_eq!(subkeys_inv[ 84.. 88], [0xC7, 0x45, 0xA0, 0x2B]);
    assert_eq!(subkeys_inv[ 88.. 92], [0xF8, 0xB9, 0xA5, 0x72]);
    assert_eq!(subkeys_inv[ 92.. 96], [0x46, 0x2A, 0x99, 0x04]);
    assert_eq!(subkeys_inv[ 96..100], [0xC5, 0xDD, 0xB7, 0xF8]);
    assert_eq!(subkeys_inv[100..104], [0xBE, 0x93, 0x3C, 0x76]);
    assert_eq!(subkeys_inv[104..108], [0x0B, 0x4F, 0x46, 0xA6]);
    assert_eq!(subkeys_inv[108..112], [0xFC, 0x80, 0xBD, 0xAF]);
    assert_eq!(subkeys_inv[112..116], [0xB5, 0xDC, 0x7A, 0xD0]);
    assert_eq!(subkeys_inv[116..120], [0xF7, 0xCF, 0xFB, 0x09]);
    assert_eq!(subkeys_inv[120..124], [0xA7, 0xEC, 0x43, 0x93]);
    assert_eq!(subkeys_inv[124..128], [0x9C, 0x29, 0x5E, 0x17]);
    assert_eq!(subkeys_inv[128..132], [0x50, 0x23, 0xB8, 0x9A]);
    assert_eq!(subkeys_inv[132..136], [0x3B, 0xC5, 0x1D, 0x84]);
    assert_eq!(subkeys_inv[136..140], [0xD0, 0x4B, 0x19, 0x37]);
    assert_eq!(subkeys_inv[140..144], [0x7B, 0x4E, 0x8B, 0x8E]);
    assert_eq!(subkeys_inv[144..148], [0x41, 0xB3, 0x45, 0x44]);
    assert_eq!(subkeys_inv[148..152], [0xAB, 0x05, 0x92, 0xB9]);
    assert_eq!(subkeys_inv[152..156], [0xCE, 0x92, 0xF1, 0x5E]);
    assert_eq!(subkeys_inv[156..160], [0x42, 0x13, 0x81, 0xD9]);
    assert_eq!(subkeys_inv[160..164], [0x65, 0x97, 0x63, 0xE7]);
    assert_eq!(subkeys_inv[164..168], [0x8C, 0x81, 0x70, 0x87]);
    assert_eq!(subkeys_inv[168..172], [0x12, 0x30, 0x39, 0x43]);
    assert_eq!(subkeys_inv[172..176], [0x6B, 0xE6, 0xA5, 0x1E]);
    assert_eq!(subkeys_inv[176..180], [0x9E, 0xB1, 0x49, 0xC4]);
    assert_eq!(subkeys_inv[180..184], [0x79, 0xD6, 0x9C, 0x5D]);
    assert_eq!(subkeys_inv[184..188], [0xFE, 0xB4, 0xA2, 0x7C]);
    assert_eq!(subkeys_inv[188..192], [0xEA, 0xB6, 0xD7, 0xFD]);
    assert_eq!(subkeys_inv[192..196], [0x8E, 0x73, 0xB0, 0xF7]);
    assert_eq!(subkeys_inv[196..200], [0xDA, 0x0E, 0x64, 0x52]);
    assert_eq!(subkeys_inv[200..204], [0xC8, 0x10, 0xF3, 0x2B]);
    assert_eq!(subkeys_inv[204..208], [0x80, 0x90, 0x79, 0xE5]);
}

#[test]
fn test_scheduling_256() {
    let aes = AES::new(
        &[0x60, 0x3D, 0xEB, 0x10, 0x15, 0xCA, 0x71, 0xBE,
        0x2B, 0x73, 0xAE, 0xF0, 0x85, 0x7D, 0x77, 0x81,
        0x1F, 0x35, 0x2C, 0x07, 0x3B, 0x61, 0x08, 0xD7,
        0x2D, 0x98, 0x10, 0xA3, 0x09, 0x14, 0xDF, 0xF4]);
    let mut subkeys : [u8; 240] = [0; 240];
    for i in 0..240/4 {
        AESEndian::write_u32(&mut subkeys[4 * i .. 4 * i + 4], aes.subkeys[i]);
    }
    assert_eq!(subkeys[  0..  4], [0x60, 0x3D, 0xEB, 0x10]);
    assert_eq!(subkeys[  4..  8], [0x15, 0xCA, 0x71, 0xBE]);
    assert_eq!(subkeys[  8.. 12], [0x2B, 0x73, 0xAE, 0xF0]);
    assert_eq!(subkeys[ 12.. 16], [0x85, 0x7D, 0x77, 0x81]);
    assert_eq!(subkeys[ 16.. 20], [0x1F, 0x35, 0x2C, 0x07]);
    assert_eq!(subkeys[ 20.. 24], [0x3B, 0x61, 0x08, 0xD7]);
    assert_eq!(subkeys[ 24.. 28], [0x2D, 0x98, 0x10, 0xA3]);
    assert_eq!(subkeys[ 28.. 32], [0x09, 0x14, 0xDF, 0xF4]);
    assert_eq!(subkeys[ 32.. 36], [0x9B, 0xA3, 0x54, 0x11]);
    assert_eq!(subkeys[ 36.. 40], [0x8E, 0x69, 0x25, 0xAF]);
    assert_eq!(subkeys[ 40.. 44], [0xA5, 0x1A, 0x8B, 0x5F]);
    assert_eq!(subkeys[ 44.. 48], [0x20, 0x67, 0xFC, 0xDE]);
    assert_eq!(subkeys[ 48.. 52], [0xA8, 0xB0, 0x9C, 0x1A]);
    assert_eq!(subkeys[ 52.. 56], [0x93, 0xD1, 0x94, 0xCD]);
    assert_eq!(subkeys[ 56.. 60], [0xBE, 0x49, 0x84, 0x6E]);
    assert_eq!(subkeys[ 60.. 64], [0xB7, 0x5D, 0x5B, 0x9A]);
    assert_eq!(subkeys[ 64.. 68], [0xD5, 0x9A, 0xEC, 0xB8]);
    assert_eq!(subkeys[ 68.. 72], [0x5B, 0xF3, 0xC9, 0x17]);
    assert_eq!(subkeys[ 72.. 76], [0xFE, 0xE9, 0x42, 0x48]);
    assert_eq!(subkeys[ 76.. 80], [0xDE, 0x8E, 0xBE, 0x96]);
    assert_eq!(subkeys[ 80.. 84], [0xB5, 0xA9, 0x32, 0x8A]);
    assert_eq!(subkeys[ 84.. 88], [0x26, 0x78, 0xA6, 0x47]);
    assert_eq!(subkeys[ 88.. 92], [0x98, 0x31, 0x22, 0x29]);
    assert_eq!(subkeys[ 92.. 96], [0x2F, 0x6C, 0x79, 0xB3]);
    assert_eq!(subkeys[ 96..100], [0x81, 0x2C, 0x81, 0xAD]);
    assert_eq!(subkeys[100..104], [0xDA, 0xDF, 0x48, 0xBA]);
    assert_eq!(subkeys[104..108], [0x24, 0x36, 0x0A, 0xF2]);
    assert_eq!(subkeys[108..112], [0xFA, 0xB8, 0xB4, 0x64]);
    assert_eq!(subkeys[112..116], [0x98, 0xC5, 0xBF, 0xC9]);
    assert_eq!(subkeys[116..120], [0xBE, 0xBD, 0x19, 0x8E]);
    assert_eq!(subkeys[120..124], [0x26, 0x8C, 0x3B, 0xA7]);
    assert_eq!(subkeys[124..128], [0x09, 0xE0, 0x42, 0x14]);
    assert_eq!(subkeys[128..132], [0x68, 0x00, 0x7B, 0xAC]);
    assert_eq!(subkeys[132..136], [0xB2, 0xDF, 0x33, 0x16]);
    assert_eq!(subkeys[136..140], [0x96, 0xE9, 0x39, 0xE4]);
    assert_eq!(subkeys[140..144], [0x6C, 0x51, 0x8D, 0x80]);
    assert_eq!(subkeys[144..148], [0xC8, 0x14, 0xE2, 0x04]);
    assert_eq!(subkeys[148..152], [0x76, 0xA9, 0xFB, 0x8A]);
    assert_eq!(subkeys[152..156], [0x50, 0x25, 0xC0, 0x2D]);
    assert_eq!(subkeys[156..160], [0x59, 0xC5, 0x82, 0x39]);
    assert_eq!(subkeys[160..164], [0xDE, 0x13, 0x69, 0x67]);
    assert_eq!(subkeys[164..168], [0x6C, 0xCC, 0x5A, 0x71]);
    assert_eq!(subkeys[168..172], [0xFA, 0x25, 0x63, 0x95]);
    assert_eq!(subkeys[172..176], [0x96, 0x74, 0xEE, 0x15]);
    assert_eq!(subkeys[176..180], [0x58, 0x86, 0xCA, 0x5D]);
    assert_eq!(subkeys[180..184], [0x2E, 0x2F, 0x31, 0xD7]);
    assert_eq!(subkeys[184..188], [0x7E, 0x0A, 0xF1, 0xFA]);
    assert_eq!(subkeys[188..192], [0x27, 0xCF, 0x73, 0xC3]);
    assert_eq!(subkeys[192..196], [0x74, 0x9C, 0x47, 0xAB]);
    assert_eq!(subkeys[196..200], [0x18, 0x50, 0x1D, 0xDA]);
    assert_eq!(subkeys[200..204], [0xE2, 0x75, 0x7E, 0x4F]);
    assert_eq!(subkeys[204..208], [0x74, 0x01, 0x90, 0x5A]);
    assert_eq!(subkeys[208..212], [0xCA, 0xFA, 0xAA, 0xE3]);
    assert_eq!(subkeys[212..216], [0xE4, 0xD5, 0x9B, 0x34]);
    assert_eq!(subkeys[216..220], [0x9A, 0xDF, 0x6A, 0xCE]);
    assert_eq!(subkeys[220..224], [0xBD, 0x10, 0x19, 0x0D]);
    assert_eq!(subkeys[224..228], [0xFE, 0x48, 0x90, 0xD1]);
    assert_eq!(subkeys[228..232], [0xE6, 0x18, 0x8D, 0x0B]);
    assert_eq!(subkeys[232..236], [0x04, 0x6D, 0xF3, 0x44]);
    assert_eq!(subkeys[236..240], [0x70, 0x6C, 0x63, 0x1E]);

    let mut subkeys_inv : [u8; 240] = [0; 240];
    for i in 0..240/4 {
        AESEndian::write_u32(
            &mut subkeys_inv[4 * i .. 4 * i + 4], aes.subkeys_inv[i]);
    }
    assert_eq!(subkeys_inv[  0..  4], [0xFE, 0x48, 0x90, 0xD1]);
    assert_eq!(subkeys_inv[  4..  8], [0xE6, 0x18, 0x8D, 0x0B]);
    assert_eq!(subkeys_inv[  8.. 12], [0x04, 0x6D, 0xF3, 0x44]);
    assert_eq!(subkeys_inv[ 12.. 16], [0x70, 0x6C, 0x63, 0x1E]);
    assert_eq!(subkeys_inv[ 16.. 20], [0xAD, 0xA2, 0x3F, 0x49]);
    assert_eq!(subkeys_inv[ 20.. 24], [0x63, 0xE2, 0x3B, 0x24]);
    assert_eq!(subkeys_inv[ 24.. 28], [0x55, 0x42, 0x7C, 0x8A]);
    assert_eq!(subkeys_inv[ 28.. 32], [0x5C, 0x70, 0x91, 0x04]);
    assert_eq!(subkeys_inv[ 32.. 36], [0x57, 0xC9, 0x6C, 0xF6]);
    assert_eq!(subkeys_inv[ 36.. 40], [0x07, 0x4F, 0x07, 0xC0]);
    assert_eq!(subkeys_inv[ 40.. 44], [0x70, 0x6A, 0xBB, 0x07]);
    assert_eq!(subkeys_inv[ 44.. 48], [0x13, 0x7F, 0x92, 0x41]);
    assert_eq!(subkeys_inv[ 48.. 52], [0xB6, 0x68, 0xB6, 0x21]);
    assert_eq!(subkeys_inv[ 52.. 56], [0xCE, 0x40, 0x04, 0x6D]);
    assert_eq!(subkeys_inv[ 56.. 60], [0x36, 0xA0, 0x47, 0xAE]);
    assert_eq!(subkeys_inv[ 60.. 64], [0x09, 0x32, 0xED, 0x8E]);
    assert_eq!(subkeys_inv[ 64.. 68], [0x34, 0xAD, 0x1E, 0x44]);
    assert_eq!(subkeys_inv[ 68.. 72], [0x50, 0x86, 0x6B, 0x36]);
    assert_eq!(subkeys_inv[ 72.. 76], [0x77, 0x25, 0xBC, 0xC7]);
    assert_eq!(subkeys_inv[ 76.. 80], [0x63, 0x15, 0x29, 0x46]);
    assert_eq!(subkeys_inv[ 80.. 84], [0x32, 0x52, 0x6C, 0x36]);
    assert_eq!(subkeys_inv[ 84.. 88], [0x78, 0x28, 0xB2, 0x4C]);
    assert_eq!(subkeys_inv[ 88.. 92], [0xF8, 0xE0, 0x43, 0xC3]);
    assert_eq!(subkeys_inv[ 92.. 96], [0x3F, 0x92, 0xAA, 0x20]);
    assert_eq!(subkeys_inv[ 96..100], [0xC4, 0x40, 0xB2, 0x89]);
    assert_eq!(subkeys_inv[100..104], [0x64, 0x2B, 0x75, 0x72]);
    assert_eq!(subkeys_inv[104..108], [0x27, 0xA3, 0xD7, 0xF1]);
    assert_eq!(subkeys_inv[108..112], [0x14, 0x30, 0x95, 0x81]);
    assert_eq!(subkeys_inv[112..116], [0xD6, 0x69, 0xA7, 0x33]);
    assert_eq!(subkeys_inv[116..120], [0x4A, 0x7A, 0xDE, 0x7A]);
    assert_eq!(subkeys_inv[120..124], [0x80, 0xC8, 0xF1, 0x8F]);
    assert_eq!(subkeys_inv[124..128], [0xC7, 0x72, 0xE9, 0xE3]);
    assert_eq!(subkeys_inv[128..132], [0x25, 0xBA, 0x3C, 0x22]);
    assert_eq!(subkeys_inv[132..136], [0xA0, 0x6B, 0xC7, 0xFB]);
    assert_eq!(subkeys_inv[136..140], [0x43, 0x88, 0xA2, 0x83]);
    assert_eq!(subkeys_inv[140..144], [0x33, 0x93, 0x42, 0x70]);
    assert_eq!(subkeys_inv[144..148], [0x54, 0xFB, 0x80, 0x8B]);
    assert_eq!(subkeys_inv[148..152], [0x9C, 0x13, 0x79, 0x49]);
    assert_eq!(subkeys_inv[152..156], [0xCA, 0xB2, 0x2F, 0xF5]);
    assert_eq!(subkeys_inv[156..160], [0x47, 0xBA, 0x18, 0x6C]);
    assert_eq!(subkeys_inv[160..164], [0x6C, 0x3D, 0x63, 0x29]);
    assert_eq!(subkeys_inv[164..168], [0x85, 0xD1, 0xFB, 0xD9]);
    assert_eq!(subkeys_inv[168..172], [0xE3, 0xE3, 0x65, 0x78]);
    assert_eq!(subkeys_inv[172..176], [0x70, 0x1B, 0xE0, 0xF3]);
    assert_eq!(subkeys_inv[176..180], [0x4A, 0x74, 0x59, 0xF9]);
    assert_eq!(subkeys_inv[180..184], [0xC8, 0xE8, 0xF9, 0xC2]);
    assert_eq!(subkeys_inv[184..188], [0x56, 0xA1, 0x56, 0xBC]);
    assert_eq!(subkeys_inv[188..192], [0x8D, 0x08, 0x37, 0x99]);
    assert_eq!(subkeys_inv[192..196], [0x42, 0x10, 0x77, 0x58]);
    assert_eq!(subkeys_inv[196..200], [0xE9, 0xEC, 0x98, 0xF0]);
    assert_eq!(subkeys_inv[200..204], [0x66, 0x32, 0x9E, 0xA1]);
    assert_eq!(subkeys_inv[204..208], [0x93, 0xF8, 0x85, 0x8B]);
    assert_eq!(subkeys_inv[208..212], [0x8E, 0xC6, 0xBF, 0xF6]);
    assert_eq!(subkeys_inv[212..216], [0x82, 0x9C, 0xA0, 0x3B]);
    assert_eq!(subkeys_inv[216..220], [0x9E, 0x49, 0xAF, 0x7E]);
    assert_eq!(subkeys_inv[220..224], [0xDB, 0xA9, 0x61, 0x25]);
    assert_eq!(subkeys_inv[224..228], [0x60, 0x3D, 0xEB, 0x10]);
    assert_eq!(subkeys_inv[228..232], [0x15, 0xCA, 0x71, 0xBE]);
    assert_eq!(subkeys_inv[232..236], [0x2B, 0x73, 0xAE, 0xF0]);
    assert_eq!(subkeys_inv[236..240], [0x85, 0x7D, 0x77, 0x81]);
}

#[test]
fn test_round() {
    let mut block : [u32; 4] = [
        0x193DE3BE, 0xA0F4E22B, 0x9AC68D2A, 0xE9F84808,
    ];
    byteorder::BigEndian::round(&mut block);
    assert_eq!(block, [
        0x046681E5, 0xE0CB199A, 0x48F8D37A, 0x2806264C,
    ]);
}

#[test]
fn test_round_inv() {
    let mut block : [u32; 4] = [
        0x49DB873B, 0x45395389, 0x7F02D2F1, 0x77DE961A,
    ];
    byteorder::BigEndian::round_inv(&mut block);
    assert_eq!(block, [
        0xFF885597, 0x12D686AB, 0x047FAC4E, 0x5546E587,
    ]);
}

#[test]
fn test_round_final() {
    let mut block : [u32; 4] = [
        0x193DE3BE, 0xA0F4E22B, 0x9AC68D2A, 0xE9F84808,
    ];
    byteorder::BigEndian::round_final(&mut block);
    assert_eq!(block, [
        0xD4BF5D30, 0xE0B452AE, 0xB84111F1, 0x1E2798E5,
    ]);
}

#[test]
fn test_round_final_inv() {
    let mut block : [u32; 4] = [
        0xD4BF5D30, 0xE0B452AE, 0xB84111F1, 0x1E2798E5,
    ];
    byteorder::BigEndian::round_inv_final(&mut block);
    assert_eq!(block, [
        0x193DE3BE, 0xA0F4E22B, 0x9AC68D2A, 0xE9F84808,
    ]);
}
